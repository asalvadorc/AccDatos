{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Acc\u00e9s a Dades"},{"location":"Idea/","text":"Instal.laci\u00f3 de IntelliJ Idea Ultimate Tots els nostres programes seran en KOTLIN , que \u00e9s un llenguatge que est\u00e0 per damunt de Java, de manera que tots els programes, classes... realitzats en Java els podrem utilitzar sense problemes, i a m\u00e9s ens permetr\u00e0 una programaci\u00f3 molt m\u00e9s c\u00f2moda. A m\u00e9s, \u00e9s el llenguatge que utilitzareu tant en el m\u00f2dul de PMDM com en el de DI Com a pas previ i inicial instal\u00b7larem l'entorn de treball des d'on programarem, un IDE. Enguany instal\u00b7larem IntelliJ IDEA , la versi\u00f3 Ultimate , que \u00e9s la que ens proporcionar\u00e0 totes les eines per a poder treballar sense problemes. Un altre entorn molt habitual \u00e9s Eclipse , que \u00e9s el que hem utilitzat en anys anteriors, per\u00f2 que amb el plugin de Kotlin va molt lent. En IntelliJ vaja molt m\u00e9s fi. En el moment de fer aquestos apunts l'\u00faltima versi\u00f3 \u00e9s la 2022.2.1. El seg\u00fcent v\u00eddeo mostra tot el proc\u00e9s d'instal\u00b7laci\u00f3 i creaci\u00f3 del primer projecte. Correspon a una versi\u00f3 anterior, per\u00f2 totalment similar a l'actual Llicenciat sota la Llic\u00e8ncia Creative Commons Reconeixement NoComercial CompartirIgual 2.5","title":"Instalaci\u00f3 IntelliJ Idea Ultimate"},{"location":"Idea/#installacio-de-intellij-idea-ultimate","text":"Tots els nostres programes seran en KOTLIN , que \u00e9s un llenguatge que est\u00e0 per damunt de Java, de manera que tots els programes, classes... realitzats en Java els podrem utilitzar sense problemes, i a m\u00e9s ens permetr\u00e0 una programaci\u00f3 molt m\u00e9s c\u00f2moda. A m\u00e9s, \u00e9s el llenguatge que utilitzareu tant en el m\u00f2dul de PMDM com en el de DI Com a pas previ i inicial instal\u00b7larem l'entorn de treball des d'on programarem, un IDE. Enguany instal\u00b7larem IntelliJ IDEA , la versi\u00f3 Ultimate , que \u00e9s la que ens proporcionar\u00e0 totes les eines per a poder treballar sense problemes. Un altre entorn molt habitual \u00e9s Eclipse , que \u00e9s el que hem utilitzat en anys anteriors, per\u00f2 que amb el plugin de Kotlin va molt lent. En IntelliJ vaja molt m\u00e9s fi. En el moment de fer aquestos apunts l'\u00faltima versi\u00f3 \u00e9s la 2022.2.1. El seg\u00fcent v\u00eddeo mostra tot el proc\u00e9s d'instal\u00b7laci\u00f3 i creaci\u00f3 del primer projecte. Correspon a una versi\u00f3 anterior, per\u00f2 totalment similar a l'actual Llicenciat sota la Llic\u00e8ncia Creative Commons Reconeixement NoComercial CompartirIgual 2.5","title":"Instal.laci\u00f3 de IntelliJ Idea Ultimate"},{"location":"Introduccion/","text":"Introducci\u00f3n \u00bfA qu\u00e9 nos referimos cuando hablamos de acceso a datos en una aplicaci\u00f3n inform\u00e1tica? Podemos afirmar que en la inmensa mayor\u00eda de aplicaciones inform\u00e1ticas se pueden diferenciar, a grandes rasgos, en dos partes: Por un lado, el programa propiamente dicho, que realiza las operaciones deseadas con los datos necesarios. Por otro lado, los datos con los que opera le programa. Esos datos pueden ser obtenidos por el programa mediante diversos m\u00e9todos: le\u00eddos mediante teclado, escaneados, le\u00eddos de alg\u00fan soporte de almacenamiento secundario, etc. En la mayor\u00eda de los casos, cuando programamos, nos interesa que el programa guarde los datos que le hemos introducido, o los resultados que dicho programa haya obtenido, de manera que si el programa termina su ejecuci\u00f3n, los datos no se pierdan y puedan ser recuperados posteriormente, es decir, persistan. Una forma tradicional de hacer esto es mediante la utilizaci\u00f3n de ficheros o de bases de datos que se guardar\u00e1n en un dispositivo de memoria no vol\u00e1til (normalmente un disco). Te habr\u00e1s dado cuenta de que el almacenamiento en memoria RAM, mediante variables o vectores, es temporal, los datos se pierden cuando el programa termina. Quiz\u00e1s te habr\u00e1 pasado alguna vez que, debido a un apag\u00f3n el\u00e9ctrico, has perdido el trabajo que estabas haciendo, que todav\u00eda no hab\u00edas grabado. Los datos que se guardan en almacenamiento secundario, como ficheros o bases de datos, se denominan datos persistentes, porque existen, o persisten m\u00e1s all\u00e1 de la ejecuci\u00f3n de la aplicaci\u00f3n. Ese almacenamiento secundario de datos que acabamos de mencionar, habitualmente suele consistir en una base de datos relacional, si bien, a veces, hay otros m\u00e9todos de almacenamiento, y por tanto, m\u00e9todos de acceso a esos datos. De conocer esos tipos de almacenamiento y c\u00f3mo acceder a ellos es de lo que trata este m\u00f3dulo. En esta unidad inicial, vas a ver una panor\u00e1mica de los diversos m\u00e9todos de persistencia que encontramos en el mercado. Acceso a Datos Hay diversas estrategias de acceso a datos para gestionar la persistencia de los datos: Mediante ficheros. Bases de datos, que pueden ser: Relacionales, Orientadas a objetos, Objeto-relacionales. Mapeo objeto relacional (ORM). Bases de datos XML (eXtensible Markup Language). Componentes. Al principio, en los primeros tiempos de la inform\u00e1tica, los datos se guardaban en ficheros convencionales. Con el tiempo, y la experiencia de trabajar con dichos ficheros, se observaron los inconvenientes de los ficheros, y para intentar solucionar los inconvenientes que se observaron surgieron las bases de datos, que entre otras ventajas permit\u00edan: Eliminar el problema de la informaci\u00f3n redundante. Eliminar informaci\u00f3n inconsistente. Globalizar o centralizar la informaci\u00f3n. Garantizar el mantenimiento de la integridad en la informaci\u00f3n. \u00danicamente se almacena la informaci\u00f3n correcta. Independencia de datos. La independencia de datos implica una separaci\u00f3n entre programas y datos, es decir, se pueden hacer cambios en la informaci\u00f3n que contiene la base de datos, o tener acceso a la base de datos de diferente manera, sin tener que hacer cambios en las aplicaciones o en los programas. Qu\u00e9 estrategia o m\u00e9todo de acceso a datos usar. Posteriormente, con la aparici\u00f3n y expansi\u00f3n de la programaci\u00f3n orientada a objetos, empezaron a surgir las Bases de datos orientadas a objetos, y tambi\u00e9n se ampliaron algunas bases de datos relacionales, a\u00f1adi\u00e9ndoles extensiones de orientaci\u00f3n a objetos. Entonces \u00bfqu\u00e9 m\u00e9todo de acceso a datos es mejor? \u00bfCu\u00e1l deber\u00edas utilizar en la pr\u00f3xima aplicaci\u00f3n que construyas? Pues..., no hay una respuesta f\u00e1cil para esas preguntas, no se puede afirmar que haya un m\u00e9todo que sea el mejor de manera absoluta. M\u00e1s bien, la cuesti\u00f3n es tener claro qu\u00e9 tipo de aplicaci\u00f3n hay que construir y, seg\u00fan eso, estudiar qu\u00e9 tipo de sistema de almacenamiento ser\u00e1 mejor usar: si una base de datos orientada a objetos, o una base de datos XML, etc. Conociendo el funcionamiento de las diferentes alternativas podemos comparar sus prestaciones al problema de la persistencia concreto que se nos presente. Cada una de las tecnolog\u00edas tiene su propio origen y filosof\u00eda para alcanzar el mismo fin y, por esta raz\u00f3n, no es f\u00e1cil analizar sus ventajas y desventajas frente a las dem\u00e1s alternativas. Por poner un ejemplo, lo m\u00e1s sencillo posible: si voy a crear una base de datos para guardar mi colecci\u00f3n de v\u00eddeos, probablemente no me va a interesar utilizar una base de datos Oracle, sino un producto mucho m\u00e1s barato, y sencillo de instalar y mantener.","title":"Introducci\u00f3"},{"location":"Introduccion/#introduccion","text":"\u00bfA qu\u00e9 nos referimos cuando hablamos de acceso a datos en una aplicaci\u00f3n inform\u00e1tica? Podemos afirmar que en la inmensa mayor\u00eda de aplicaciones inform\u00e1ticas se pueden diferenciar, a grandes rasgos, en dos partes: Por un lado, el programa propiamente dicho, que realiza las operaciones deseadas con los datos necesarios. Por otro lado, los datos con los que opera le programa. Esos datos pueden ser obtenidos por el programa mediante diversos m\u00e9todos: le\u00eddos mediante teclado, escaneados, le\u00eddos de alg\u00fan soporte de almacenamiento secundario, etc. En la mayor\u00eda de los casos, cuando programamos, nos interesa que el programa guarde los datos que le hemos introducido, o los resultados que dicho programa haya obtenido, de manera que si el programa termina su ejecuci\u00f3n, los datos no se pierdan y puedan ser recuperados posteriormente, es decir, persistan. Una forma tradicional de hacer esto es mediante la utilizaci\u00f3n de ficheros o de bases de datos que se guardar\u00e1n en un dispositivo de memoria no vol\u00e1til (normalmente un disco). Te habr\u00e1s dado cuenta de que el almacenamiento en memoria RAM, mediante variables o vectores, es temporal, los datos se pierden cuando el programa termina. Quiz\u00e1s te habr\u00e1 pasado alguna vez que, debido a un apag\u00f3n el\u00e9ctrico, has perdido el trabajo que estabas haciendo, que todav\u00eda no hab\u00edas grabado. Los datos que se guardan en almacenamiento secundario, como ficheros o bases de datos, se denominan datos persistentes, porque existen, o persisten m\u00e1s all\u00e1 de la ejecuci\u00f3n de la aplicaci\u00f3n. Ese almacenamiento secundario de datos que acabamos de mencionar, habitualmente suele consistir en una base de datos relacional, si bien, a veces, hay otros m\u00e9todos de almacenamiento, y por tanto, m\u00e9todos de acceso a esos datos. De conocer esos tipos de almacenamiento y c\u00f3mo acceder a ellos es de lo que trata este m\u00f3dulo. En esta unidad inicial, vas a ver una panor\u00e1mica de los diversos m\u00e9todos de persistencia que encontramos en el mercado.","title":"Introducci\u00f3n"},{"location":"Introduccion/#acceso-a-datos","text":"Hay diversas estrategias de acceso a datos para gestionar la persistencia de los datos: Mediante ficheros. Bases de datos, que pueden ser: Relacionales, Orientadas a objetos, Objeto-relacionales. Mapeo objeto relacional (ORM). Bases de datos XML (eXtensible Markup Language). Componentes. Al principio, en los primeros tiempos de la inform\u00e1tica, los datos se guardaban en ficheros convencionales. Con el tiempo, y la experiencia de trabajar con dichos ficheros, se observaron los inconvenientes de los ficheros, y para intentar solucionar los inconvenientes que se observaron surgieron las bases de datos, que entre otras ventajas permit\u00edan: Eliminar el problema de la informaci\u00f3n redundante. Eliminar informaci\u00f3n inconsistente. Globalizar o centralizar la informaci\u00f3n. Garantizar el mantenimiento de la integridad en la informaci\u00f3n. \u00danicamente se almacena la informaci\u00f3n correcta. Independencia de datos. La independencia de datos implica una separaci\u00f3n entre programas y datos, es decir, se pueden hacer cambios en la informaci\u00f3n que contiene la base de datos, o tener acceso a la base de datos de diferente manera, sin tener que hacer cambios en las aplicaciones o en los programas.","title":"Acceso a Datos"},{"location":"Introduccion/#que-estrategia-o-metodo-de-acceso-a-datos-usar","text":"Posteriormente, con la aparici\u00f3n y expansi\u00f3n de la programaci\u00f3n orientada a objetos, empezaron a surgir las Bases de datos orientadas a objetos, y tambi\u00e9n se ampliaron algunas bases de datos relacionales, a\u00f1adi\u00e9ndoles extensiones de orientaci\u00f3n a objetos. Entonces \u00bfqu\u00e9 m\u00e9todo de acceso a datos es mejor? \u00bfCu\u00e1l deber\u00edas utilizar en la pr\u00f3xima aplicaci\u00f3n que construyas? Pues..., no hay una respuesta f\u00e1cil para esas preguntas, no se puede afirmar que haya un m\u00e9todo que sea el mejor de manera absoluta. M\u00e1s bien, la cuesti\u00f3n es tener claro qu\u00e9 tipo de aplicaci\u00f3n hay que construir y, seg\u00fan eso, estudiar qu\u00e9 tipo de sistema de almacenamiento ser\u00e1 mejor usar: si una base de datos orientada a objetos, o una base de datos XML, etc. Conociendo el funcionamiento de las diferentes alternativas podemos comparar sus prestaciones al problema de la persistencia concreto que se nos presente. Cada una de las tecnolog\u00edas tiene su propio origen y filosof\u00eda para alcanzar el mismo fin y, por esta raz\u00f3n, no es f\u00e1cil analizar sus ventajas y desventajas frente a las dem\u00e1s alternativas. Por poner un ejemplo, lo m\u00e1s sencillo posible: si voy a crear una base de datos para guardar mi colecci\u00f3n de v\u00eddeos, probablemente no me va a interesar utilizar una base de datos Oracle, sino un producto mucho m\u00e1s barato, y sencillo de instalar y mantener.","title":"Qu\u00e9 estrategia o m\u00e9todo de acceso a datos usar."}]}